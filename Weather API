import tkinter as tk  # Importing the tkinter library for creating GUI applications
from tkinter import messagebox  # Importing messagebox for displaying error messages
import requests  # Importing requests library for making HTTP requests to APIs

class WeatherApp:
    def __init__(self, root):
        self.root = root  # Assigning the root window to an instance variable
        self.root.title("Weather App")  # Setting the title of the window
        self.api_key = "ad9634bbc7554aad813164354243112"  # API key for OpenWeatherMap
        self.city = tk.StringVar()  # StringVar to hold the city name input by the user
        self.weather_data = tk.StringVar()  # StringVar to hold the fetched weather data

        # Label for city input
        self.city_label = tk.Label(root, text="Enter City Name:")
        self.city_label.pack()  # Adding the label to the window

        # Entry widget for user to input city name
        self.city_entry = tk.Entry(root, textvariable=self.city)
        self.city_entry.pack()  # Adding the entry widget to the window

        # Button to fetch weather data
        self.fetch_button = tk.Button(root, text="Fetch Weather Data", command=self.fetch_weather_data)
        self.fetch_button.pack()  # Adding the button to the window

        # Label to show loading status
        self.loading_label = tk.Label(root, text="")
        self.loading_label.pack()  # Adding the loading label to the window

        # Label to display fetched weather data
        self.weather_label = tk.Label(root, textvariable=self.weather_data)
        self.weather_label.pack()  # Adding the weather label to the window

    def fetch_weather_data(self):
        city_name = self.city.get()  # Get the city name from the input field
        if city_name:  # Check if the city name is not empty
            self.loading_label.config(text="Loading...")  # Update loading label to indicate fetching
            self.weather_data.set("")  # Clear previous weather data from the display
            # Construct the API URL with the city name and API key
            api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={self.api_key}&units=metric"
            try:
                response = requests.get(api_url)  # Make a GET request to the OpenWeatherMap API
                if response.status_code == 200:  # Check if the request was successful (HTTP status 200)
                    data = response.json()  # Parse the JSON response from the API
                    # Construct the weather information string to display
                    weather_info = f"Weather in {data['name']}: \n"
                    weather_info += f"Temperature: {data['main']['temp']}°C\n"  # Add temperature
                    weather_info += f"Humidity: {data['main']['humidity']}%\n"  # Add humidity
                    weather_info += f"Weather Description: {data['weather'][0]['description']}\n"  # Add weather description
                    weather_info += f"Wind Speed: {data['wind']['speed']} m/s\n"  # Add wind speed
                    weather_info += f"Weather Icon: {data['weather'][0]['icon']}"  # Add weather icon code
                    self.weather_data.set(weather_info)  # Update the weather data label with the fetched info
                else:
                    self.weather_data.set("Invalid city name or network issue.")  # Handle invalid city name or network issues
            except requests.exceptions.RequestException as e:
                self.weather_data.set("Network issue.")  # Handle network-related errors
            finally:
                self.loading_label.config(text="")  # Clear loading label after fetching data
        else:
            messagebox.showerror("Error", "Please enter a city name.")  # Show error if city name is empty

# Main block to run the application
if __name__ == "__main__":
    root = tk.Tk()  # Create the main window
    app = WeatherApp(root)  # Create an instance of the WeatherApp class
    root.mainloop()  # Start the Tkinter event loop to keep the application running

+-------------------------------------+
|            Weather App              |
+-------------------------------------+
| Enter City Name:                   |
| [Pune___________________________]   |
| [Fetch Weather Data]                |
|                                     |
| Weather in Pune:                   |
| Temperature: 28°C                  |
| Humidity: 60%                      |
| Weather Description: Clear sky      |
| Wind Speed: 3 m/s                  |
| Weather Icon: 01d                  |
+-------------------------------------+
